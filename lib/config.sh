#!/bin/bash

# Function to load configuration from file or set defaults
load_config() {
    print_message $BLUE "Loading configuration..." true

    # Create config and log directories if they don't exist
    mkdir -p "$CONFIG_DIR" || { print_message $RED "FATAL: Could not create config directory $CONFIG_DIR. Exiting." true; exit 1; }
    mkdir -p "$SCRIPT_LOG_DIR" || { print_message $RED "FATAL: Could not create log directory $SCRIPT_LOG_DIR. Exiting." true; exit 1; }

    if [ ! -f "$CONFIG_FILE" ]; then
        run_setup_wizard
        # After the wizard runs, the config file should exist.
        if [ ! -f "$CONFIG_FILE" ]; then
            print_message $RED "FATAL: Configuration file not found after setup wizard. Exiting." true
            exit 1
        fi
    fi

    # Source the configuration file
    # Disable unbound variable errors temporarily if config is incomplete
    set +u
    # Use grep to remove comment lines before sourcing to avoid issues
    # with comments that might be misinterpreted by the shell.
    source <(grep -v '^\s*#' "$CONFIG_FILE")
    set -u # Re-enable unbound variable errors

    # --- Assign variables from config or use defaults if missing ---
    AZEROTHCORE_DIR="${AZEROTHCORE_DIR:-$DEFAULT_AZEROTHCORE_DIR}"
    BACKUP_DIR="${BACKUP_DIR:-$DEFAULT_BACKUP_DIR}"
    # Set DB_USER default based on whether USE_DOCKER is true
    USE_DOCKER="${USE_DOCKER:-$DEFAULT_USE_DOCKER}"
    if [ "$USE_DOCKER" = true ]; then
        DB_USER="${DB_USER:-$DEFAULT_DB_USER_DOCKER}"
    else
        DB_USER="${DB_USER:-$DEFAULT_DB_USER}"
    fi
    DB_PASS="${DB_PASS:-$DEFAULT_DB_PASS}"
    AUTH_DB_NAME="${AUTH_DB_NAME:-$DEFAULT_AUTH_DB_NAME}"
    CHAR_DB_NAME="${CHAR_DB_NAME:-$DEFAULT_CHAR_DB_NAME}"
    WORLD_DB_NAME="${WORLD_DB_NAME:-$DEFAULT_WORLD_DB_NAME}"

    local server_config_suffix="${SERVER_CONFIG_DIR_PATH_SUFFIX:-$DEFAULT_SERVER_CONFIG_DIR_PATH_SUFFIX}"
    local server_log_suffix="${SERVER_LOG_DIR_PATH_SUFFIX:-$DEFAULT_SERVER_LOG_DIR_PATH_SUFFIX}"

    AUTH_SERVER_LOG_FILENAME="${AUTH_SERVER_LOG_FILENAME:-$DEFAULT_AUTH_SERVER_LOG_FILENAME}"
    WORLD_SERVER_LOG_FILENAME="${WORLD_SERVER_LOG_FILENAME:-$DEFAULT_WORLD_SERVER_LOG_FILENAME}"
    ERROR_LOG_FILENAME="${ERROR_LOG_FILENAME:-$DEFAULT_ERROR_LOG_FILENAME}"
    SCRIPT_LOG_FILENAME="${SCRIPT_LOG_FILENAME:-$DEFAULT_SCRIPT_LOG_FILENAME}"

    POST_SHUTDOWN_DELAY_SECONDS="${POST_SHUTDOWN_DELAY_SECONDS:-$DEFAULT_POST_SHUTDOWN_DELAY_SECONDS}"
    CORES="${CORES_FOR_BUILD:-$DEFAULT_CORES_FOR_BUILD}"
    USE_DOCKER="${USE_DOCKER:-$DEFAULT_USE_DOCKER}"
    CRON_PATH="${CRON_PATH:-$DEFAULT_CRON_PATH}"

    # --- [New] Assign build variables ---
    CMAKE_C_COMPILER="${CMAKE_C_COMPILER:-$DEFAULT_CMAKE_C_COMPILER}"
    CMAKE_CXX_COMPILER="${CMAKE_CXX_COMPILER:-$DEFAULT_CMAKE_CXX_COMPILER}"
    CMAKE_BUILD_FLAGS="${CMAKE_BUILD_FLAGS:-$DEFAULT_CMAKE_BUILD_FLAGS}"


    # --- Assign non-user-configurable variables from defaults ---
    AUTH_PORT="${DEFAULT_AUTH_PORT}"
    WORLD_PORT="${DEFAULT_WORLD_PORT}"

    # --- Update dynamic paths based on loaded/defaulted AZEROTHCORE_DIR ---
    BUILD_DIR="$AZEROTHCORE_DIR/build"
    SERVER_CONFIG_DIR_PATH="$AZEROTHCORE_DIR/$server_config_suffix"
    SERVER_LOG_DIR_PATH="$AZEROTHCORE_DIR/$server_log_suffix"
    AUTH_SERVER_EXEC="$AZEROTHCORE_DIR/env/dist/bin/authserver"
    WORLD_SERVER_EXEC="$AZEROTHCORE_DIR/env/dist/bin/worldserver"


    # --- Configuration Migration/Update ---
    if ! grep -q "CRON_PATH=" "$CONFIG_FILE"; then
        print_message $YELLOW "CRON_PATH not found in config, adding it now..." true
        local current_system_path
        current_system_path=$(echo "$PATH")
        save_config_value "CRON_PATH" "$current_system_path"
        CRON_PATH="$current_system_path"
        print_message $GREEN "CRON_PATH has been saved to your configuration." true
    fi
    if ! grep -q "CMAKE_C_COMPILER=" "$CONFIG_FILE"; then
        print_message $YELLOW "New build settings not found in config, adding them now..." true
        save_config # This will save all settings, including the new ones, with the new format.
        print_message $GREEN "New build settings have been added to your configuration." true
    fi

    print_message $GREEN "Configuration loaded successfully." true
}

# Function to save the current configuration to the config file
save_config() {
    print_message $BLUE "Saving configuration..." true
    local temp_config_file="$CONFIG_DIR/ACrebuild.conf.tmp"

    local current_path
    current_path=$(echo "$PATH")

    # Create the config file content in a temporary file
    cat > "$temp_config_file" <<EOF
# ACrebuild Configuration File
# This file is automatically generated by the script.
# You can edit it manually, but the script will overwrite it on next save.

# -----------------------------------------------------------------------------
# [Core Settings]
# These are the most important settings you will need.
# -----------------------------------------------------------------------------

# Set to 'true' to enable Docker mode, 'false' for standard (local build) mode.
USE_DOCKER="$USE_DOCKER"

# The full path to your azerothcore-wotlk source code directory.
AZEROTHCORE_DIR="$AZEROTHCORE_DIR"

# The number of CPU cores to use for compiling ('make -j').
# Leave empty to use all available cores. Only used in non-Docker mode.
CORES_FOR_BUILD="$CORES"

# -----------------------------------------------------------------------------
# [Database & Backup Settings]
# Configure your database connection and backup locations.
# -----------------------------------------------------------------------------

# The user for connecting to the MySQL databases.
# Defaults to 'acore' for standard, 'root' for Docker.
DB_USER="$DB_USER"

# The password for the database user.
# For security, it is recommended to leave this blank. The script will prompt you.
# For automated backups (cron), this MUST be filled in.
DB_PASS="$DB_PASS"

# The directory where backups will be stored.
BACKUP_DIR="$BACKUP_DIR"

# -----------------------------------------------------------------------------
# [Advanced Settings]
# These settings are less likely to be changed.
# -----------------------------------------------------------------------------

# --- Build Customization (for non-Docker mode) ---
CMAKE_C_COMPILER="$CMAKE_C_COMPILER"
CMAKE_CXX_COMPILER="$CMAKE_CXX_COMPILER"
CMAKE_BUILD_FLAGS="$CMAKE_BUILD_FLAGS"

# --- Database Names ---
AUTH_DB_NAME="$AUTH_DB_NAME"
CHAR_DB_NAME="$CHAR_DB_NAME"
WORLD_DB_NAME="$WORLD_DB_NAME"

# --- Server Path & Log Suffixes ---
SERVER_CONFIG_DIR_PATH_SUFFIX="$DEFAULT_SERVER_CONFIG_DIR_PATH_SUFFIX"
SERVER_LOG_DIR_PATH_SUFFIX="$DEFAULT_SERVER_LOG_DIR_PATH_SUFFIX"
AUTH_SERVER_LOG_FILENAME="$AUTH_SERVER_LOG_FILENAME"
WORLD_SERVER_LOG_FILENAME="$WORLD_SERVER_LOG_FILENAME"
ERROR_LOG_FILENAME="$ERROR_LOG_FILENAME"

# --- Timings & System ---
POST_SHUTDOWN_DELAY_SECONDS="$POST_SHUTDOWN_DELAY_SECONDS"
CRON_PATH="$current_path"

EOF

    if [ $? -eq 0 ]; then
        mv "$temp_config_file" "$CONFIG_FILE"
        if [ $? -eq 0 ]; then
            chmod 600 "$CONFIG_FILE"
            print_message $GREEN "Configuration successfully saved to $CONFIG_FILE" true
            return 0
        else
            print_message $RED "FATAL: Could not move temp config file to $CONFIG_FILE." true
            rm -f "$temp_config_file"
            return 1
        fi
    else
        print_message $RED "FATAL: Could not write to temporary config file $temp_config_file." true
        rm -f "$temp_config_file"
        return 1
    fi
}

save_config_value() {
    local key_to_save="$1"
    local value_to_save="$2"
    local temp_config_file="$CONFIG_DIR/ACrebuild.conf.tmp"

    if [ ! -f "$CONFIG_FILE" ]; then
        print_message $YELLOW "Config file not found. A new one will be created." true
        touch "$CONFIG_FILE" || { print_message $RED "FATAL: Could not create config file $CONFIG_FILE." true; return 1; }
        chmod 600 "$CONFIG_FILE"
    fi

    local escaped_value
    escaped_value=$(echo "$value_to_save" | sed -e 's/\\/\\\\/g' -e 's/"/\\"/g' -e 's/&/\\&/g' -e 's/|/\\|/g')

    # Check if the key exists (ignoring comments) and update it, otherwise append it.
    if grep -q "^\s*${key_to_save}=" "$CONFIG_FILE"; then
        sed "s|^\s*${key_to_save}=.*|${key_to_save}=\"${escaped_value}\"|" "$CONFIG_FILE" > "$temp_config_file" && mv "$temp_config_file" "$CONFIG_FILE"
    else
        echo "${key_to_save}=\"${escaped_value}\"" >> "$CONFIG_FILE"
    fi

    if [ $? -eq 0 ]; then
        print_message $GREEN "Configuration value '$key_to_save' updated." false
    else
        print_message $RED "Error updating '$key_to_save' in $CONFIG_FILE." true
        rm -f "$temp_config_file"
        return 1
    fi
    return 0
}

ask_for_core_installation_path() {
    local current_ac_dir="$AZEROTHCORE_DIR"
    echo ""
    print_message $YELLOW "AzerothCore Installation Path Setup" true
    print_message $CYAN "The current AzerothCore directory is set to: $current_ac_dir" false
    print_message $YELLOW "Press ENTER to keep the current path, or enter a new path:" false
    read -r user_input_path

    if [ -n "$user_input_path" ] && [ "$user_input_path" != "$current_ac_dir" ]; then
        print_message $YELLOW "You entered a new path: $user_input_path" false
        if [ ! -d "$user_input_path" ]; then
            print_message $YELLOW "Warning: The specified directory does not currently exist." false
        fi

        print_message $YELLOW "Save this new path to the configuration file? (y/n)" true
        read -r save_choice
        if [[ "$save_choice" =~ ^[Yy]([Ee][Ss])?$ ]]; then
            save_config_value "AZEROTHCORE_DIR" "$user_input_path"
            # Reload config to update all related paths and variables
            load_config
        else
            print_message $CYAN "New path will be used for this session only." false
            AZEROTHCORE_DIR="$user_input_path"
            # Manually update dynamic paths
            BUILD_DIR="$AZEROTHCORE_DIR/build"
            SERVER_CONFIG_DIR_PATH="$AZEROTHCORE_DIR/$DEFAULT_SERVER_CONFIG_DIR_PATH_SUFFIX"
            SERVER_LOG_DIR_PATH="$AZEROTHCORE_DIR/$DEFAULT_SERVER_LOG_DIR_PATH_SUFFIX"
            AUTH_SERVER_EXEC="$AZEROTHCORE_DIR/env/dist/bin/authserver"
            WORLD_SERVER_EXEC="$AZEROTHCORE_DIR/env/dist/bin/worldserver"
        fi
    fi

    print_message $BLUE "Effective paths for this session:" true
    print_message $GREEN " AzerothCore Directory: $AZEROTHCORE_DIR" false
}
